import chromadb
from chromadb.config import Settings
import os
import sys
import json
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from dotenv import load_dotenv
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_text_splitters import RecursiveCharacterTextSplitter
from module.clean_text import clean_text_for_rag

def get_embeddings_model():
    embeddings_model = HuggingFaceEmbeddings(
            model_name='sentence-transformers/all-MiniLM-L6-v2',
            model_kwargs={'device':'cpu'},
            encode_kwargs={'normalize_embeddings':True},
        )
    return embeddings_model

def get_chromadb_collection(file_path):
    load_dotenv('../RAG_Pipeline/.env')

    client = chromadb.HttpClient(
            host=os.getenv('CHROMADB_HOST'), 
            port=os.getenv('CHROMADB_PORT'), 
            settings=Settings(anonymized_telemetry=False)
        )

    collection_name = f'document_{os.path.basename(file_path)[0]}'
    print(f"Collection name: {collection_name}")

    collection = client.get_or_create_collection(name=collection_name)
    return collection

def process_json_document(json_path):
    # JSON 파일 로드
    with open(json_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    # 텍스트 스플리터 설정
    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size=1000,
        chunk_overlap=200,
        length_function=len,
        separators=["\n\n", "\n"],
        is_separator_regex=False
    )
    
    embeddings_model = get_embeddings_model()
    collection = get_chromadb_collection(json_path)
    
    # JSON 데이터를 순회하면서 청킹 및 임베딩
    for section_idx, section in enumerate(data):
        text = clean_text_for_rag(section.get('content', ''))
        page_number = section.get('page', 0)  # 페이지 번호 정보 가져오기
        chunks = text_splitter.split_text(text)
        
        print(f'섹션 {section_idx + 1} (페이지: {page_number}) 처리 중:')
        print(f"섹션 제목: {section.get('title', 'No Title')}")
        
        for chunk_idx, chunk in enumerate(chunks):
            print(f'청크 {chunk_idx + 1}/{len(chunks)}:')
            print(f'{chunk}\n')
            
            embedding = embeddings_model.embed_query(chunk)
            
            collection.add(
                embeddings=[embedding],
                documents=[chunk],
                ids=[f"page_{page_number}_section_{section_idx+1}_chunk_{chunk_idx+1}"],
                metadatas=[{
                    'page_number': page_number,
                    'chunk_index': chunk_idx + 1,
                    'total_chunks_in_section': len(chunks),
                    'source_file': os.path.basename(json_path)
                }]
            )

if __name__ == "__main__":
    json_path = '../RAG_Pipeline/json/A 한화생명 간편가입 암보험.json'
    process_json_document(json_path) 